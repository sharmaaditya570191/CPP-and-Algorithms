// Input - int coin[] (Array of coin values), int sum, int n (size of array)
// Output - No. of ways in which sum can be generated by selecting coins
// Similar to count of subset sum with variation according to unbounded knapsack

int coinChange(int coin[], int sum, int n) {
    int t[n+1][sum+1];

    for(int i = 0; i < n+1; i++) {
        for(int j = 0; j < sum+1; j++) {
            if(i == 0) {
                t[i][j] = 0;
            }
            if(j == 0) {
                t[i][j] = 1;
            }
        }
    }

    for(int i = 1; i < n+1; i++) {
        for(int j = 1; j < sum+1; j++) {
            if(coin[i-1] <= j) {
                t[i][j] = t[i][j-coin[i-1]] + t[i-1][j];
            }
            else {
                t[i][j] = t[i-1][j];
            }
        }
    }

    return t[n][sum];
}